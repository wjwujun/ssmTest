<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.demo.dao.TbuserDao">
    <!--<sql/> 标签用于定义 SQL 片断，以便其它 SQL 标签复用。而其它标签使用该 SQL 片断， 需要使用 <include/> 子标签。该 <sql/> 标签可以定义 SQL 语句中的任何部分，所以 <include/> 子标签可以放在动态 SQL 的任何位置。-->
    <sql id="TbuserCplumns">
        SELECT * FROM
    </sql>
    

    <select id="selectAll" resultType="User">
        <include refid="TbuserCplumns"/>
          tb_user
    </select>

    <insert id="insert">
        INSERT INTO tb_user (
          username,pwd,phone,created,salt)
        VALUES
          (#{username},#{pwd},#{phone},#{created},#{salt})
    </insert>

    <delete id="del">
        DELETE FROM tb_user WHERE id = #{id}
    </delete>

    <select id="selectByName" resultType="User">
        SELECT * FROM tb_user
        WHERE username LIKE CONCAT ('%', #{username}, '%')
    </select>


    <!--*********************-->
    <!-- if 对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。
            本例实现的功能是：查询出满足用户提交查询条件的所有学生。用户提交的查询条件可以包含一个姓名的模糊查询，同时还可以包含一个年龄的下限。当然，用户在提交表单时可能两个条件均做出了设定，也可能两个条件均不做设定，也可以只做其中一项设定。
            这引发的问题是，查询条件不确定，查询条件依赖于用户提交的内容。此时，就可使用动态 SQL 语句，根据用户提交内容对将要执行的 SQL 进行拼接。-->
    <select id="selectByIf" resultType="com.lusifer.mybatis.entity.Student">
        SELECT
        id,
        name,
        age,
        score
        FROM
        student
        WHERE 1 = 1
        <if test="name != null and name != ''">
            AND name LIKE concat('%', #{name}, '%')
        </if>
        <if test="age != null and age > 0">
            AND age > #{age}
        </if>
    </select>


    <!-- where
            <if/> 标签的中存在一个比较麻烦的地方：需要在 where 后手工添加 1=1 的子句。因为，若 where 后的所有 <if/> 条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩下一个空的 where，SQL 出错。所以，在 where 后，需要添加永为真子句 1=1，以防止这种情况的发生。但当数据量很大时，会严重影响查询效率。-->
    <select id="selectByWhere" resultType="com.lusifer.mybatis.entity.Student">
        SELECT
        id,
        name,
        age,
        score
        FROM
        student
        <where>
            <if test="name != null and name != ''">
                AND name LIKE concat('%', #{name}, '%')
            </if>
            <if test="age != null and age > 0">
                AND age > #{age}
            </if>
        </where>
    </select>



    <!-- choose

            该标签中只可以包含 <when/> <otherwise/>，可以包含多个 <when/> 与一个 <otherwise/>。它们联合使用，完成 Java 中的开关语句 switch..case 功能。
            本例要完成的需求是，若姓名不空，则按照姓名查询；若姓名为空，则按照年龄查询；若没有查询条件，则没有查询结果。-->
    <select id="selectByChoose" resultType="com.lusifer.mybatis.entity.Student">
        SELECT
        id,
        name,
        age,
        score
        FROM
        student
        <where>
            <choose>
                <when test="name != null and name != ''">
                    AND name LIKE concat('%', #{name}, '%')
                </when>
                <when test="age != null and age > 0">
                    AND age > #{age}
                </when>
                <otherwise>
                    AND 1 != 1
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- foreach
            <foreach/> 标签用于实现对于数组与集合的遍历。对其使用，需要注意：
            collection 表示要遍历的集合类型，这里是数组，即 array。
            open、close、separator 为对遍历内容的 SQL 拼接。
            本例实现的需求是，查询出 id 为 2 与 4 的学生信息。
    -->
    <select id="selectByForeach" resultType="com.lusifer.mybatis.entity.Student">
        <!-- select * from student where id in (2, 4) -->
        SELECT
        id,
        name,
        age,
        score
        FROM
        student
        <if test="array != null and array.length > 0">
            WHERE id IN
            <foreach collection="array" open="(" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </if>
    </select>

</mapper>